// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TrainingRecord is an object representing the database table.
type TrainingRecord struct { // 記録ID
	ID int `boil:"id" json:"id" toml:"id" yaml:"id"`
	// ユーザーID
	UserID int `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	// レコード作成日時
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// レコード更新日時
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	// レコード削除日時
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *trainingRecordR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L trainingRecordL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TrainingRecordColumns = struct {
	ID        string
	UserID    string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	UserID:    "user_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var TrainingRecordTableColumns = struct {
	ID        string
	UserID    string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "training_records.id",
	UserID:    "training_records.user_id",
	CreatedAt: "training_records.created_at",
	UpdatedAt: "training_records.updated_at",
	DeletedAt: "training_records.deleted_at",
}

// Generated where

var TrainingRecordWhere = struct {
	ID        whereHelperint
	UserID    whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: "`training_records`.`id`"},
	UserID:    whereHelperint{field: "`training_records`.`user_id`"},
	CreatedAt: whereHelpertime_Time{field: "`training_records`.`created_at`"},
	UpdatedAt: whereHelpertime_Time{field: "`training_records`.`updated_at`"},
	DeletedAt: whereHelpernull_Time{field: "`training_records`.`deleted_at`"},
}

// TrainingRecordRels is where relationship names are stored.
var TrainingRecordRels = struct {
	User               string
	TrainingSetDetails string
	TrainingSets       string
}{
	User:               "User",
	TrainingSetDetails: "TrainingSetDetails",
	TrainingSets:       "TrainingSets",
}

// trainingRecordR is where relationships are stored.
type trainingRecordR struct {
	User               *User                  `boil:"User" json:"User" toml:"User" yaml:"User"`
	TrainingSetDetails TrainingSetDetailSlice `boil:"TrainingSetDetails" json:"TrainingSetDetails" toml:"TrainingSetDetails" yaml:"TrainingSetDetails"`
	TrainingSets       TrainingSetSlice       `boil:"TrainingSets" json:"TrainingSets" toml:"TrainingSets" yaml:"TrainingSets"`
}

// NewStruct creates a new relationship struct
func (*trainingRecordR) NewStruct() *trainingRecordR {
	return &trainingRecordR{}
}

func (r *trainingRecordR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *trainingRecordR) GetTrainingSetDetails() TrainingSetDetailSlice {
	if r == nil {
		return nil
	}
	return r.TrainingSetDetails
}

func (r *trainingRecordR) GetTrainingSets() TrainingSetSlice {
	if r == nil {
		return nil
	}
	return r.TrainingSets
}

// trainingRecordL is where Load methods for each relationship are stored.
type trainingRecordL struct{}

var (
	trainingRecordAllColumns            = []string{"id", "user_id", "created_at", "updated_at", "deleted_at"}
	trainingRecordColumnsWithoutDefault = []string{"id", "user_id", "deleted_at"}
	trainingRecordColumnsWithDefault    = []string{"created_at", "updated_at"}
	trainingRecordPrimaryKeyColumns     = []string{"id"}
	trainingRecordGeneratedColumns      = []string{}
)

type (
	// TrainingRecordSlice is an alias for a slice of pointers to TrainingRecord.
	// This should almost always be used instead of []TrainingRecord.
	TrainingRecordSlice []*TrainingRecord
	// TrainingRecordHook is the signature for custom TrainingRecord hook methods
	TrainingRecordHook func(context.Context, boil.ContextExecutor, *TrainingRecord) error

	trainingRecordQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	trainingRecordType                 = reflect.TypeOf(&TrainingRecord{})
	trainingRecordMapping              = queries.MakeStructMapping(trainingRecordType)
	trainingRecordPrimaryKeyMapping, _ = queries.BindMapping(trainingRecordType, trainingRecordMapping, trainingRecordPrimaryKeyColumns)
	trainingRecordInsertCacheMut       sync.RWMutex
	trainingRecordInsertCache          = make(map[string]insertCache)
	trainingRecordUpdateCacheMut       sync.RWMutex
	trainingRecordUpdateCache          = make(map[string]updateCache)
	trainingRecordUpsertCacheMut       sync.RWMutex
	trainingRecordUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var trainingRecordAfterSelectHooks []TrainingRecordHook

var trainingRecordBeforeInsertHooks []TrainingRecordHook
var trainingRecordAfterInsertHooks []TrainingRecordHook

var trainingRecordBeforeUpdateHooks []TrainingRecordHook
var trainingRecordAfterUpdateHooks []TrainingRecordHook

var trainingRecordBeforeDeleteHooks []TrainingRecordHook
var trainingRecordAfterDeleteHooks []TrainingRecordHook

var trainingRecordBeforeUpsertHooks []TrainingRecordHook
var trainingRecordAfterUpsertHooks []TrainingRecordHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TrainingRecord) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingRecordAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TrainingRecord) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingRecordBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TrainingRecord) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingRecordAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TrainingRecord) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingRecordBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TrainingRecord) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingRecordAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TrainingRecord) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingRecordBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TrainingRecord) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingRecordAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TrainingRecord) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingRecordBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TrainingRecord) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingRecordAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTrainingRecordHook registers your hook function for all future operations.
func AddTrainingRecordHook(hookPoint boil.HookPoint, trainingRecordHook TrainingRecordHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		trainingRecordAfterSelectHooks = append(trainingRecordAfterSelectHooks, trainingRecordHook)
	case boil.BeforeInsertHook:
		trainingRecordBeforeInsertHooks = append(trainingRecordBeforeInsertHooks, trainingRecordHook)
	case boil.AfterInsertHook:
		trainingRecordAfterInsertHooks = append(trainingRecordAfterInsertHooks, trainingRecordHook)
	case boil.BeforeUpdateHook:
		trainingRecordBeforeUpdateHooks = append(trainingRecordBeforeUpdateHooks, trainingRecordHook)
	case boil.AfterUpdateHook:
		trainingRecordAfterUpdateHooks = append(trainingRecordAfterUpdateHooks, trainingRecordHook)
	case boil.BeforeDeleteHook:
		trainingRecordBeforeDeleteHooks = append(trainingRecordBeforeDeleteHooks, trainingRecordHook)
	case boil.AfterDeleteHook:
		trainingRecordAfterDeleteHooks = append(trainingRecordAfterDeleteHooks, trainingRecordHook)
	case boil.BeforeUpsertHook:
		trainingRecordBeforeUpsertHooks = append(trainingRecordBeforeUpsertHooks, trainingRecordHook)
	case boil.AfterUpsertHook:
		trainingRecordAfterUpsertHooks = append(trainingRecordAfterUpsertHooks, trainingRecordHook)
	}
}

// One returns a single trainingRecord record from the query.
func (q trainingRecordQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TrainingRecord, error) {
	o := &TrainingRecord{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for training_records")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TrainingRecord records from the query.
func (q trainingRecordQuery) All(ctx context.Context, exec boil.ContextExecutor) (TrainingRecordSlice, error) {
	var o []*TrainingRecord

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to TrainingRecord slice")
	}

	if len(trainingRecordAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TrainingRecord records in the query.
func (q trainingRecordQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count training_records rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q trainingRecordQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if training_records exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *TrainingRecord) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// TrainingSetDetails retrieves all the training_set_detail's TrainingSetDetails with an executor.
func (o *TrainingRecord) TrainingSetDetails(mods ...qm.QueryMod) trainingSetDetailQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`training_set_details`.`training_record_id`=?", o.ID),
	)

	return TrainingSetDetails(queryMods...)
}

// TrainingSets retrieves all the training_set's TrainingSets with an executor.
func (o *TrainingRecord) TrainingSets(mods ...qm.QueryMod) trainingSetQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`training_sets`.`training_record_id`=?", o.ID),
	)

	return TrainingSets(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (trainingRecordL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrainingRecord interface{}, mods queries.Applicator) error {
	var slice []*TrainingRecord
	var object *TrainingRecord

	if singular {
		var ok bool
		object, ok = maybeTrainingRecord.(*TrainingRecord)
		if !ok {
			object = new(TrainingRecord)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrainingRecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrainingRecord))
			}
		}
	} else {
		s, ok := maybeTrainingRecord.(*[]*TrainingRecord)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrainingRecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrainingRecord))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trainingRecordR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trainingRecordR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.TrainingRecords = append(foreign.R.TrainingRecords, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.TrainingRecords = append(foreign.R.TrainingRecords, local)
				break
			}
		}
	}

	return nil
}

// LoadTrainingSetDetails allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trainingRecordL) LoadTrainingSetDetails(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrainingRecord interface{}, mods queries.Applicator) error {
	var slice []*TrainingRecord
	var object *TrainingRecord

	if singular {
		var ok bool
		object, ok = maybeTrainingRecord.(*TrainingRecord)
		if !ok {
			object = new(TrainingRecord)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrainingRecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrainingRecord))
			}
		}
	} else {
		s, ok := maybeTrainingRecord.(*[]*TrainingRecord)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrainingRecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrainingRecord))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trainingRecordR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trainingRecordR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`training_set_details`),
		qm.WhereIn(`training_set_details.training_record_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load training_set_details")
	}

	var resultSlice []*TrainingSetDetail
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice training_set_details")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on training_set_details")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for training_set_details")
	}

	if len(trainingSetDetailAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TrainingSetDetails = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &trainingSetDetailR{}
			}
			foreign.R.TrainingRecord = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TrainingRecordID {
				local.R.TrainingSetDetails = append(local.R.TrainingSetDetails, foreign)
				if foreign.R == nil {
					foreign.R = &trainingSetDetailR{}
				}
				foreign.R.TrainingRecord = local
				break
			}
		}
	}

	return nil
}

// LoadTrainingSets allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trainingRecordL) LoadTrainingSets(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrainingRecord interface{}, mods queries.Applicator) error {
	var slice []*TrainingRecord
	var object *TrainingRecord

	if singular {
		var ok bool
		object, ok = maybeTrainingRecord.(*TrainingRecord)
		if !ok {
			object = new(TrainingRecord)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrainingRecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrainingRecord))
			}
		}
	} else {
		s, ok := maybeTrainingRecord.(*[]*TrainingRecord)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrainingRecord)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrainingRecord))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trainingRecordR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trainingRecordR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`training_sets`),
		qm.WhereIn(`training_sets.training_record_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load training_sets")
	}

	var resultSlice []*TrainingSet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice training_sets")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on training_sets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for training_sets")
	}

	if len(trainingSetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TrainingSets = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &trainingSetR{}
			}
			foreign.R.TrainingRecord = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TrainingRecordID {
				local.R.TrainingSets = append(local.R.TrainingSets, foreign)
				if foreign.R == nil {
					foreign.R = &trainingSetR{}
				}
				foreign.R.TrainingRecord = local
				break
			}
		}
	}

	return nil
}

// SetUser of the trainingRecord to the related item.
// Sets o.R.User to related.
// Adds o to related.R.TrainingRecords.
func (o *TrainingRecord) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `training_records` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, trainingRecordPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &trainingRecordR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			TrainingRecords: TrainingRecordSlice{o},
		}
	} else {
		related.R.TrainingRecords = append(related.R.TrainingRecords, o)
	}

	return nil
}

// AddTrainingSetDetails adds the given related objects to the existing relationships
// of the training_record, optionally inserting them as new records.
// Appends related to o.R.TrainingSetDetails.
// Sets related.R.TrainingRecord appropriately.
func (o *TrainingRecord) AddTrainingSetDetails(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TrainingSetDetail) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TrainingRecordID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `training_set_details` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"training_record_id"}),
				strmangle.WhereClause("`", "`", 0, trainingSetDetailPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TrainingRecordID = o.ID
		}
	}

	if o.R == nil {
		o.R = &trainingRecordR{
			TrainingSetDetails: related,
		}
	} else {
		o.R.TrainingSetDetails = append(o.R.TrainingSetDetails, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &trainingSetDetailR{
				TrainingRecord: o,
			}
		} else {
			rel.R.TrainingRecord = o
		}
	}
	return nil
}

// AddTrainingSets adds the given related objects to the existing relationships
// of the training_record, optionally inserting them as new records.
// Appends related to o.R.TrainingSets.
// Sets related.R.TrainingRecord appropriately.
func (o *TrainingRecord) AddTrainingSets(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TrainingSet) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TrainingRecordID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `training_sets` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"training_record_id"}),
				strmangle.WhereClause("`", "`", 0, trainingSetPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TrainingRecordID = o.ID
		}
	}

	if o.R == nil {
		o.R = &trainingRecordR{
			TrainingSets: related,
		}
	} else {
		o.R.TrainingSets = append(o.R.TrainingSets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &trainingSetR{
				TrainingRecord: o,
			}
		} else {
			rel.R.TrainingRecord = o
		}
	}
	return nil
}

// TrainingRecords retrieves all the records using an executor.
func TrainingRecords(mods ...qm.QueryMod) trainingRecordQuery {
	mods = append(mods, qm.From("`training_records`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`training_records`.*"})
	}

	return trainingRecordQuery{q}
}

// FindTrainingRecord retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTrainingRecord(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TrainingRecord, error) {
	trainingRecordObj := &TrainingRecord{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `training_records` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, trainingRecordObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from training_records")
	}

	if err = trainingRecordObj.doAfterSelectHooks(ctx, exec); err != nil {
		return trainingRecordObj, err
	}

	return trainingRecordObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TrainingRecord) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no training_records provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trainingRecordColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	trainingRecordInsertCacheMut.RLock()
	cache, cached := trainingRecordInsertCache[key]
	trainingRecordInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			trainingRecordAllColumns,
			trainingRecordColumnsWithDefault,
			trainingRecordColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(trainingRecordType, trainingRecordMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(trainingRecordType, trainingRecordMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `training_records` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `training_records` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `training_records` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, trainingRecordPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into training_records")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "db: unable to populate default values for training_records")
	}

CacheNoHooks:
	if !cached {
		trainingRecordInsertCacheMut.Lock()
		trainingRecordInsertCache[key] = cache
		trainingRecordInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TrainingRecord.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TrainingRecord) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	trainingRecordUpdateCacheMut.RLock()
	cache, cached := trainingRecordUpdateCache[key]
	trainingRecordUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			trainingRecordAllColumns,
			trainingRecordPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update training_records, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `training_records` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, trainingRecordPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(trainingRecordType, trainingRecordMapping, append(wl, trainingRecordPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update training_records row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for training_records")
	}

	if !cached {
		trainingRecordUpdateCacheMut.Lock()
		trainingRecordUpdateCache[key] = cache
		trainingRecordUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q trainingRecordQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for training_records")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for training_records")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TrainingRecordSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trainingRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `training_records` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, trainingRecordPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in trainingRecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all trainingRecord")
	}
	return rowsAff, nil
}

var mySQLTrainingRecordUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TrainingRecord) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no training_records provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trainingRecordColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTrainingRecordUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	trainingRecordUpsertCacheMut.RLock()
	cache, cached := trainingRecordUpsertCache[key]
	trainingRecordUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			trainingRecordAllColumns,
			trainingRecordColumnsWithDefault,
			trainingRecordColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			trainingRecordAllColumns,
			trainingRecordPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("db: unable to upsert training_records, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`training_records`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `training_records` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(trainingRecordType, trainingRecordMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(trainingRecordType, trainingRecordMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "db: unable to upsert for training_records")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(trainingRecordType, trainingRecordMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "db: unable to retrieve unique values for training_records")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "db: unable to populate default values for training_records")
	}

CacheNoHooks:
	if !cached {
		trainingRecordUpsertCacheMut.Lock()
		trainingRecordUpsertCache[key] = cache
		trainingRecordUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TrainingRecord record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TrainingRecord) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no TrainingRecord provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), trainingRecordPrimaryKeyMapping)
	sql := "DELETE FROM `training_records` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from training_records")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for training_records")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q trainingRecordQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no trainingRecordQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from training_records")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for training_records")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TrainingRecordSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(trainingRecordBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trainingRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `training_records` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, trainingRecordPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from trainingRecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for training_records")
	}

	if len(trainingRecordAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TrainingRecord) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTrainingRecord(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TrainingRecordSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TrainingRecordSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trainingRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `training_records`.* FROM `training_records` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, trainingRecordPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in TrainingRecordSlice")
	}

	*o = slice

	return nil
}

// TrainingRecordExists checks if the TrainingRecord row exists.
func TrainingRecordExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `training_records` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if training_records exists")
	}

	return exists, nil
}

// Exists checks if the TrainingRecord row exists.
func (o *TrainingRecord) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TrainingRecordExists(ctx, exec, o.ID)
}
