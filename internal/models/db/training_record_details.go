// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TrainingRecordDetail is an object representing the database table.
type TrainingRecordDetail struct { // 記録ID
	RecordID int `boil:"record_id" json:"record_id" toml:"record_id" yaml:"record_id"`
	// 種目ID
	ExerciseID int `boil:"exercise_id" json:"exercise_id" toml:"exercise_id" yaml:"exercise_id"`
	// 重量(kg)
	Weight null.Int `boil:"weight" json:"weight,omitempty" toml:"weight" yaml:"weight,omitempty"`
	// レップ数
	Rep null.Int `boil:"rep" json:"rep,omitempty" toml:"rep" yaml:"rep,omitempty"`
	// セット数
	SetNum null.Int `boil:"set_num" json:"set_num,omitempty" toml:"set_num" yaml:"set_num,omitempty"`
	// その他詳細
	Memo null.String `boil:"memo" json:"memo,omitempty" toml:"memo" yaml:"memo,omitempty"`

	R *trainingRecordDetailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L trainingRecordDetailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TrainingRecordDetailColumns = struct {
	RecordID   string
	ExerciseID string
	Weight     string
	Rep        string
	SetNum     string
	Memo       string
}{
	RecordID:   "record_id",
	ExerciseID: "exercise_id",
	Weight:     "weight",
	Rep:        "rep",
	SetNum:     "set_num",
	Memo:       "memo",
}

var TrainingRecordDetailTableColumns = struct {
	RecordID   string
	ExerciseID string
	Weight     string
	Rep        string
	SetNum     string
	Memo       string
}{
	RecordID:   "training_record_details.record_id",
	ExerciseID: "training_record_details.exercise_id",
	Weight:     "training_record_details.weight",
	Rep:        "training_record_details.rep",
	SetNum:     "training_record_details.set_num",
	Memo:       "training_record_details.memo",
}

// Generated where

var TrainingRecordDetailWhere = struct {
	RecordID   whereHelperint
	ExerciseID whereHelperint
	Weight     whereHelpernull_Int
	Rep        whereHelpernull_Int
	SetNum     whereHelpernull_Int
	Memo       whereHelpernull_String
}{
	RecordID:   whereHelperint{field: "`training_record_details`.`record_id`"},
	ExerciseID: whereHelperint{field: "`training_record_details`.`exercise_id`"},
	Weight:     whereHelpernull_Int{field: "`training_record_details`.`weight`"},
	Rep:        whereHelpernull_Int{field: "`training_record_details`.`rep`"},
	SetNum:     whereHelpernull_Int{field: "`training_record_details`.`set_num`"},
	Memo:       whereHelpernull_String{field: "`training_record_details`.`memo`"},
}

// TrainingRecordDetailRels is where relationship names are stored.
var TrainingRecordDetailRels = struct {
	Record   string
	Exercise string
}{
	Record:   "Record",
	Exercise: "Exercise",
}

// trainingRecordDetailR is where relationships are stored.
type trainingRecordDetailR struct {
	Record   *TrainingRecord `boil:"Record" json:"Record" toml:"Record" yaml:"Record"`
	Exercise *Exercise       `boil:"Exercise" json:"Exercise" toml:"Exercise" yaml:"Exercise"`
}

// NewStruct creates a new relationship struct
func (*trainingRecordDetailR) NewStruct() *trainingRecordDetailR {
	return &trainingRecordDetailR{}
}

func (r *trainingRecordDetailR) GetRecord() *TrainingRecord {
	if r == nil {
		return nil
	}
	return r.Record
}

func (r *trainingRecordDetailR) GetExercise() *Exercise {
	if r == nil {
		return nil
	}
	return r.Exercise
}

// trainingRecordDetailL is where Load methods for each relationship are stored.
type trainingRecordDetailL struct{}

var (
	trainingRecordDetailAllColumns            = []string{"record_id", "exercise_id", "weight", "rep", "set_num", "memo"}
	trainingRecordDetailColumnsWithoutDefault = []string{"record_id", "exercise_id", "weight", "rep", "set_num", "memo"}
	trainingRecordDetailColumnsWithDefault    = []string{}
	trainingRecordDetailPrimaryKeyColumns     = []string{"record_id", "exercise_id"}
	trainingRecordDetailGeneratedColumns      = []string{}
)

type (
	// TrainingRecordDetailSlice is an alias for a slice of pointers to TrainingRecordDetail.
	// This should almost always be used instead of []TrainingRecordDetail.
	TrainingRecordDetailSlice []*TrainingRecordDetail
	// TrainingRecordDetailHook is the signature for custom TrainingRecordDetail hook methods
	TrainingRecordDetailHook func(context.Context, boil.ContextExecutor, *TrainingRecordDetail) error

	trainingRecordDetailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	trainingRecordDetailType                 = reflect.TypeOf(&TrainingRecordDetail{})
	trainingRecordDetailMapping              = queries.MakeStructMapping(trainingRecordDetailType)
	trainingRecordDetailPrimaryKeyMapping, _ = queries.BindMapping(trainingRecordDetailType, trainingRecordDetailMapping, trainingRecordDetailPrimaryKeyColumns)
	trainingRecordDetailInsertCacheMut       sync.RWMutex
	trainingRecordDetailInsertCache          = make(map[string]insertCache)
	trainingRecordDetailUpdateCacheMut       sync.RWMutex
	trainingRecordDetailUpdateCache          = make(map[string]updateCache)
	trainingRecordDetailUpsertCacheMut       sync.RWMutex
	trainingRecordDetailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var trainingRecordDetailAfterSelectHooks []TrainingRecordDetailHook

var trainingRecordDetailBeforeInsertHooks []TrainingRecordDetailHook
var trainingRecordDetailAfterInsertHooks []TrainingRecordDetailHook

var trainingRecordDetailBeforeUpdateHooks []TrainingRecordDetailHook
var trainingRecordDetailAfterUpdateHooks []TrainingRecordDetailHook

var trainingRecordDetailBeforeDeleteHooks []TrainingRecordDetailHook
var trainingRecordDetailAfterDeleteHooks []TrainingRecordDetailHook

var trainingRecordDetailBeforeUpsertHooks []TrainingRecordDetailHook
var trainingRecordDetailAfterUpsertHooks []TrainingRecordDetailHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TrainingRecordDetail) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingRecordDetailAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TrainingRecordDetail) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingRecordDetailBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TrainingRecordDetail) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingRecordDetailAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TrainingRecordDetail) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingRecordDetailBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TrainingRecordDetail) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingRecordDetailAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TrainingRecordDetail) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingRecordDetailBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TrainingRecordDetail) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingRecordDetailAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TrainingRecordDetail) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingRecordDetailBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TrainingRecordDetail) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingRecordDetailAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTrainingRecordDetailHook registers your hook function for all future operations.
func AddTrainingRecordDetailHook(hookPoint boil.HookPoint, trainingRecordDetailHook TrainingRecordDetailHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		trainingRecordDetailAfterSelectHooks = append(trainingRecordDetailAfterSelectHooks, trainingRecordDetailHook)
	case boil.BeforeInsertHook:
		trainingRecordDetailBeforeInsertHooks = append(trainingRecordDetailBeforeInsertHooks, trainingRecordDetailHook)
	case boil.AfterInsertHook:
		trainingRecordDetailAfterInsertHooks = append(trainingRecordDetailAfterInsertHooks, trainingRecordDetailHook)
	case boil.BeforeUpdateHook:
		trainingRecordDetailBeforeUpdateHooks = append(trainingRecordDetailBeforeUpdateHooks, trainingRecordDetailHook)
	case boil.AfterUpdateHook:
		trainingRecordDetailAfterUpdateHooks = append(trainingRecordDetailAfterUpdateHooks, trainingRecordDetailHook)
	case boil.BeforeDeleteHook:
		trainingRecordDetailBeforeDeleteHooks = append(trainingRecordDetailBeforeDeleteHooks, trainingRecordDetailHook)
	case boil.AfterDeleteHook:
		trainingRecordDetailAfterDeleteHooks = append(trainingRecordDetailAfterDeleteHooks, trainingRecordDetailHook)
	case boil.BeforeUpsertHook:
		trainingRecordDetailBeforeUpsertHooks = append(trainingRecordDetailBeforeUpsertHooks, trainingRecordDetailHook)
	case boil.AfterUpsertHook:
		trainingRecordDetailAfterUpsertHooks = append(trainingRecordDetailAfterUpsertHooks, trainingRecordDetailHook)
	}
}

// One returns a single trainingRecordDetail record from the query.
func (q trainingRecordDetailQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TrainingRecordDetail, error) {
	o := &TrainingRecordDetail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for training_record_details")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TrainingRecordDetail records from the query.
func (q trainingRecordDetailQuery) All(ctx context.Context, exec boil.ContextExecutor) (TrainingRecordDetailSlice, error) {
	var o []*TrainingRecordDetail

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to TrainingRecordDetail slice")
	}

	if len(trainingRecordDetailAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TrainingRecordDetail records in the query.
func (q trainingRecordDetailQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count training_record_details rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q trainingRecordDetailQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if training_record_details exists")
	}

	return count > 0, nil
}

// Record pointed to by the foreign key.
func (o *TrainingRecordDetail) Record(mods ...qm.QueryMod) trainingRecordQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.RecordID),
	}

	queryMods = append(queryMods, mods...)

	return TrainingRecords(queryMods...)
}

// Exercise pointed to by the foreign key.
func (o *TrainingRecordDetail) Exercise(mods ...qm.QueryMod) exerciseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ExerciseID),
	}

	queryMods = append(queryMods, mods...)

	return Exercises(queryMods...)
}

// LoadRecord allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (trainingRecordDetailL) LoadRecord(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrainingRecordDetail interface{}, mods queries.Applicator) error {
	var slice []*TrainingRecordDetail
	var object *TrainingRecordDetail

	if singular {
		var ok bool
		object, ok = maybeTrainingRecordDetail.(*TrainingRecordDetail)
		if !ok {
			object = new(TrainingRecordDetail)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrainingRecordDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrainingRecordDetail))
			}
		}
	} else {
		s, ok := maybeTrainingRecordDetail.(*[]*TrainingRecordDetail)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrainingRecordDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrainingRecordDetail))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trainingRecordDetailR{}
		}
		args = append(args, object.RecordID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trainingRecordDetailR{}
			}

			for _, a := range args {
				if a == obj.RecordID {
					continue Outer
				}
			}

			args = append(args, obj.RecordID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`training_records`),
		qm.WhereIn(`training_records.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TrainingRecord")
	}

	var resultSlice []*TrainingRecord
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TrainingRecord")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for training_records")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for training_records")
	}

	if len(trainingRecordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Record = foreign
		if foreign.R == nil {
			foreign.R = &trainingRecordR{}
		}
		foreign.R.RecordTrainingRecordDetails = append(foreign.R.RecordTrainingRecordDetails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RecordID == foreign.ID {
				local.R.Record = foreign
				if foreign.R == nil {
					foreign.R = &trainingRecordR{}
				}
				foreign.R.RecordTrainingRecordDetails = append(foreign.R.RecordTrainingRecordDetails, local)
				break
			}
		}
	}

	return nil
}

// LoadExercise allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (trainingRecordDetailL) LoadExercise(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrainingRecordDetail interface{}, mods queries.Applicator) error {
	var slice []*TrainingRecordDetail
	var object *TrainingRecordDetail

	if singular {
		var ok bool
		object, ok = maybeTrainingRecordDetail.(*TrainingRecordDetail)
		if !ok {
			object = new(TrainingRecordDetail)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrainingRecordDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrainingRecordDetail))
			}
		}
	} else {
		s, ok := maybeTrainingRecordDetail.(*[]*TrainingRecordDetail)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrainingRecordDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrainingRecordDetail))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trainingRecordDetailR{}
		}
		args = append(args, object.ExerciseID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trainingRecordDetailR{}
			}

			for _, a := range args {
				if a == obj.ExerciseID {
					continue Outer
				}
			}

			args = append(args, obj.ExerciseID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`exercise`),
		qm.WhereIn(`exercise.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Exercise")
	}

	var resultSlice []*Exercise
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Exercise")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for exercise")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for exercise")
	}

	if len(exerciseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Exercise = foreign
		if foreign.R == nil {
			foreign.R = &exerciseR{}
		}
		foreign.R.TrainingRecordDetails = append(foreign.R.TrainingRecordDetails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ExerciseID == foreign.ID {
				local.R.Exercise = foreign
				if foreign.R == nil {
					foreign.R = &exerciseR{}
				}
				foreign.R.TrainingRecordDetails = append(foreign.R.TrainingRecordDetails, local)
				break
			}
		}
	}

	return nil
}

// SetRecord of the trainingRecordDetail to the related item.
// Sets o.R.Record to related.
// Adds o to related.R.RecordTrainingRecordDetails.
func (o *TrainingRecordDetail) SetRecord(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TrainingRecord) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `training_record_details` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"record_id"}),
		strmangle.WhereClause("`", "`", 0, trainingRecordDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.RecordID, o.ExerciseID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RecordID = related.ID
	if o.R == nil {
		o.R = &trainingRecordDetailR{
			Record: related,
		}
	} else {
		o.R.Record = related
	}

	if related.R == nil {
		related.R = &trainingRecordR{
			RecordTrainingRecordDetails: TrainingRecordDetailSlice{o},
		}
	} else {
		related.R.RecordTrainingRecordDetails = append(related.R.RecordTrainingRecordDetails, o)
	}

	return nil
}

// SetExercise of the trainingRecordDetail to the related item.
// Sets o.R.Exercise to related.
// Adds o to related.R.TrainingRecordDetails.
func (o *TrainingRecordDetail) SetExercise(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Exercise) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `training_record_details` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"exercise_id"}),
		strmangle.WhereClause("`", "`", 0, trainingRecordDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.RecordID, o.ExerciseID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ExerciseID = related.ID
	if o.R == nil {
		o.R = &trainingRecordDetailR{
			Exercise: related,
		}
	} else {
		o.R.Exercise = related
	}

	if related.R == nil {
		related.R = &exerciseR{
			TrainingRecordDetails: TrainingRecordDetailSlice{o},
		}
	} else {
		related.R.TrainingRecordDetails = append(related.R.TrainingRecordDetails, o)
	}

	return nil
}

// TrainingRecordDetails retrieves all the records using an executor.
func TrainingRecordDetails(mods ...qm.QueryMod) trainingRecordDetailQuery {
	mods = append(mods, qm.From("`training_record_details`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`training_record_details`.*"})
	}

	return trainingRecordDetailQuery{q}
}

// FindTrainingRecordDetail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTrainingRecordDetail(ctx context.Context, exec boil.ContextExecutor, recordID int, exerciseID int, selectCols ...string) (*TrainingRecordDetail, error) {
	trainingRecordDetailObj := &TrainingRecordDetail{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `training_record_details` where `record_id`=? AND `exercise_id`=?", sel,
	)

	q := queries.Raw(query, recordID, exerciseID)

	err := q.Bind(ctx, exec, trainingRecordDetailObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from training_record_details")
	}

	if err = trainingRecordDetailObj.doAfterSelectHooks(ctx, exec); err != nil {
		return trainingRecordDetailObj, err
	}

	return trainingRecordDetailObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TrainingRecordDetail) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no training_record_details provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trainingRecordDetailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	trainingRecordDetailInsertCacheMut.RLock()
	cache, cached := trainingRecordDetailInsertCache[key]
	trainingRecordDetailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			trainingRecordDetailAllColumns,
			trainingRecordDetailColumnsWithDefault,
			trainingRecordDetailColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(trainingRecordDetailType, trainingRecordDetailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(trainingRecordDetailType, trainingRecordDetailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `training_record_details` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `training_record_details` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `training_record_details` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, trainingRecordDetailPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into training_record_details")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.RecordID,
		o.ExerciseID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "db: unable to populate default values for training_record_details")
	}

CacheNoHooks:
	if !cached {
		trainingRecordDetailInsertCacheMut.Lock()
		trainingRecordDetailInsertCache[key] = cache
		trainingRecordDetailInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TrainingRecordDetail.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TrainingRecordDetail) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	trainingRecordDetailUpdateCacheMut.RLock()
	cache, cached := trainingRecordDetailUpdateCache[key]
	trainingRecordDetailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			trainingRecordDetailAllColumns,
			trainingRecordDetailPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update training_record_details, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `training_record_details` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, trainingRecordDetailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(trainingRecordDetailType, trainingRecordDetailMapping, append(wl, trainingRecordDetailPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update training_record_details row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for training_record_details")
	}

	if !cached {
		trainingRecordDetailUpdateCacheMut.Lock()
		trainingRecordDetailUpdateCache[key] = cache
		trainingRecordDetailUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q trainingRecordDetailQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for training_record_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for training_record_details")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TrainingRecordDetailSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trainingRecordDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `training_record_details` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, trainingRecordDetailPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in trainingRecordDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all trainingRecordDetail")
	}
	return rowsAff, nil
}

var mySQLTrainingRecordDetailUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TrainingRecordDetail) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no training_record_details provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trainingRecordDetailColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTrainingRecordDetailUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	trainingRecordDetailUpsertCacheMut.RLock()
	cache, cached := trainingRecordDetailUpsertCache[key]
	trainingRecordDetailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			trainingRecordDetailAllColumns,
			trainingRecordDetailColumnsWithDefault,
			trainingRecordDetailColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			trainingRecordDetailAllColumns,
			trainingRecordDetailPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("db: unable to upsert training_record_details, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`training_record_details`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `training_record_details` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(trainingRecordDetailType, trainingRecordDetailMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(trainingRecordDetailType, trainingRecordDetailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "db: unable to upsert for training_record_details")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(trainingRecordDetailType, trainingRecordDetailMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "db: unable to retrieve unique values for training_record_details")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "db: unable to populate default values for training_record_details")
	}

CacheNoHooks:
	if !cached {
		trainingRecordDetailUpsertCacheMut.Lock()
		trainingRecordDetailUpsertCache[key] = cache
		trainingRecordDetailUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TrainingRecordDetail record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TrainingRecordDetail) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no TrainingRecordDetail provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), trainingRecordDetailPrimaryKeyMapping)
	sql := "DELETE FROM `training_record_details` WHERE `record_id`=? AND `exercise_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from training_record_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for training_record_details")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q trainingRecordDetailQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no trainingRecordDetailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from training_record_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for training_record_details")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TrainingRecordDetailSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(trainingRecordDetailBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trainingRecordDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `training_record_details` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, trainingRecordDetailPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from trainingRecordDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for training_record_details")
	}

	if len(trainingRecordDetailAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TrainingRecordDetail) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTrainingRecordDetail(ctx, exec, o.RecordID, o.ExerciseID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TrainingRecordDetailSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TrainingRecordDetailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trainingRecordDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `training_record_details`.* FROM `training_record_details` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, trainingRecordDetailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in TrainingRecordDetailSlice")
	}

	*o = slice

	return nil
}

// TrainingRecordDetailExists checks if the TrainingRecordDetail row exists.
func TrainingRecordDetailExists(ctx context.Context, exec boil.ContextExecutor, recordID int, exerciseID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `training_record_details` where `record_id`=? AND `exercise_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, recordID, exerciseID)
	}
	row := exec.QueryRowContext(ctx, sql, recordID, exerciseID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if training_record_details exists")
	}

	return exists, nil
}

// Exists checks if the TrainingRecordDetail row exists.
func (o *TrainingRecordDetail) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TrainingRecordDetailExists(ctx, exec, o.RecordID, o.ExerciseID)
}
