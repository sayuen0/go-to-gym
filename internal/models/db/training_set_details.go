// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TrainingSetDetail is an object representing the database table.
type TrainingSetDetail struct { // トレーニング詳細ID
	ID int `boil:"id" json:"id" toml:"id" yaml:"id"`
	// 記録ID
	TrainingRecordID int `boil:"training_record_id" json:"training_record_id" toml:"training_record_id" yaml:"training_record_id"`
	// トレーニングセットID
	TrainingSetID int `boil:"training_set_id" json:"training_set_id" toml:"training_set_id" yaml:"training_set_id"`
	// 重量(kg): NULLの場合自重
	Weight int `boil:"weight" json:"weight" toml:"weight" yaml:"weight"`
	// レップ数
	Reps int `boil:"reps" json:"reps" toml:"reps" yaml:"reps"`
	// その他詳細
	Memo null.String `boil:"memo" json:"memo,omitempty" toml:"memo" yaml:"memo,omitempty"`
	// レコード作成日時
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// レコード更新日時
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	// レコード削除日時
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *trainingSetDetailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L trainingSetDetailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TrainingSetDetailColumns = struct {
	ID               string
	TrainingRecordID string
	TrainingSetID    string
	Weight           string
	Reps             string
	Memo             string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
}{
	ID:               "id",
	TrainingRecordID: "training_record_id",
	TrainingSetID:    "training_set_id",
	Weight:           "weight",
	Reps:             "reps",
	Memo:             "memo",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	DeletedAt:        "deleted_at",
}

var TrainingSetDetailTableColumns = struct {
	ID               string
	TrainingRecordID string
	TrainingSetID    string
	Weight           string
	Reps             string
	Memo             string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
}{
	ID:               "training_set_details.id",
	TrainingRecordID: "training_set_details.training_record_id",
	TrainingSetID:    "training_set_details.training_set_id",
	Weight:           "training_set_details.weight",
	Reps:             "training_set_details.reps",
	Memo:             "training_set_details.memo",
	CreatedAt:        "training_set_details.created_at",
	UpdatedAt:        "training_set_details.updated_at",
	DeletedAt:        "training_set_details.deleted_at",
}

// Generated where

var TrainingSetDetailWhere = struct {
	ID               whereHelperint
	TrainingRecordID whereHelperint
	TrainingSetID    whereHelperint
	Weight           whereHelperint
	Reps             whereHelperint
	Memo             whereHelpernull_String
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
	DeletedAt        whereHelpernull_Time
}{
	ID:               whereHelperint{field: "`training_set_details`.`id`"},
	TrainingRecordID: whereHelperint{field: "`training_set_details`.`training_record_id`"},
	TrainingSetID:    whereHelperint{field: "`training_set_details`.`training_set_id`"},
	Weight:           whereHelperint{field: "`training_set_details`.`weight`"},
	Reps:             whereHelperint{field: "`training_set_details`.`reps`"},
	Memo:             whereHelpernull_String{field: "`training_set_details`.`memo`"},
	CreatedAt:        whereHelpertime_Time{field: "`training_set_details`.`created_at`"},
	UpdatedAt:        whereHelpertime_Time{field: "`training_set_details`.`updated_at`"},
	DeletedAt:        whereHelpernull_Time{field: "`training_set_details`.`deleted_at`"},
}

// TrainingSetDetailRels is where relationship names are stored.
var TrainingSetDetailRels = struct {
	TrainingRecord string
	TrainingSet    string
}{
	TrainingRecord: "TrainingRecord",
	TrainingSet:    "TrainingSet",
}

// trainingSetDetailR is where relationships are stored.
type trainingSetDetailR struct {
	TrainingRecord *TrainingRecord `boil:"TrainingRecord" json:"TrainingRecord" toml:"TrainingRecord" yaml:"TrainingRecord"`
	TrainingSet    *TrainingSet    `boil:"TrainingSet" json:"TrainingSet" toml:"TrainingSet" yaml:"TrainingSet"`
}

// NewStruct creates a new relationship struct
func (*trainingSetDetailR) NewStruct() *trainingSetDetailR {
	return &trainingSetDetailR{}
}

func (r *trainingSetDetailR) GetTrainingRecord() *TrainingRecord {
	if r == nil {
		return nil
	}
	return r.TrainingRecord
}

func (r *trainingSetDetailR) GetTrainingSet() *TrainingSet {
	if r == nil {
		return nil
	}
	return r.TrainingSet
}

// trainingSetDetailL is where Load methods for each relationship are stored.
type trainingSetDetailL struct{}

var (
	trainingSetDetailAllColumns            = []string{"id", "training_record_id", "training_set_id", "weight", "reps", "memo", "created_at", "updated_at", "deleted_at"}
	trainingSetDetailColumnsWithoutDefault = []string{"training_record_id", "training_set_id", "weight", "reps", "memo", "deleted_at"}
	trainingSetDetailColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	trainingSetDetailPrimaryKeyColumns     = []string{"id"}
	trainingSetDetailGeneratedColumns      = []string{}
)

type (
	// TrainingSetDetailSlice is an alias for a slice of pointers to TrainingSetDetail.
	// This should almost always be used instead of []TrainingSetDetail.
	TrainingSetDetailSlice []*TrainingSetDetail
	// TrainingSetDetailHook is the signature for custom TrainingSetDetail hook methods
	TrainingSetDetailHook func(context.Context, boil.ContextExecutor, *TrainingSetDetail) error

	trainingSetDetailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	trainingSetDetailType                 = reflect.TypeOf(&TrainingSetDetail{})
	trainingSetDetailMapping              = queries.MakeStructMapping(trainingSetDetailType)
	trainingSetDetailPrimaryKeyMapping, _ = queries.BindMapping(trainingSetDetailType, trainingSetDetailMapping, trainingSetDetailPrimaryKeyColumns)
	trainingSetDetailInsertCacheMut       sync.RWMutex
	trainingSetDetailInsertCache          = make(map[string]insertCache)
	trainingSetDetailUpdateCacheMut       sync.RWMutex
	trainingSetDetailUpdateCache          = make(map[string]updateCache)
	trainingSetDetailUpsertCacheMut       sync.RWMutex
	trainingSetDetailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var trainingSetDetailAfterSelectHooks []TrainingSetDetailHook

var trainingSetDetailBeforeInsertHooks []TrainingSetDetailHook
var trainingSetDetailAfterInsertHooks []TrainingSetDetailHook

var trainingSetDetailBeforeUpdateHooks []TrainingSetDetailHook
var trainingSetDetailAfterUpdateHooks []TrainingSetDetailHook

var trainingSetDetailBeforeDeleteHooks []TrainingSetDetailHook
var trainingSetDetailAfterDeleteHooks []TrainingSetDetailHook

var trainingSetDetailBeforeUpsertHooks []TrainingSetDetailHook
var trainingSetDetailAfterUpsertHooks []TrainingSetDetailHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TrainingSetDetail) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingSetDetailAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TrainingSetDetail) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingSetDetailBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TrainingSetDetail) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingSetDetailAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TrainingSetDetail) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingSetDetailBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TrainingSetDetail) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingSetDetailAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TrainingSetDetail) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingSetDetailBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TrainingSetDetail) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingSetDetailAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TrainingSetDetail) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingSetDetailBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TrainingSetDetail) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingSetDetailAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTrainingSetDetailHook registers your hook function for all future operations.
func AddTrainingSetDetailHook(hookPoint boil.HookPoint, trainingSetDetailHook TrainingSetDetailHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		trainingSetDetailAfterSelectHooks = append(trainingSetDetailAfterSelectHooks, trainingSetDetailHook)
	case boil.BeforeInsertHook:
		trainingSetDetailBeforeInsertHooks = append(trainingSetDetailBeforeInsertHooks, trainingSetDetailHook)
	case boil.AfterInsertHook:
		trainingSetDetailAfterInsertHooks = append(trainingSetDetailAfterInsertHooks, trainingSetDetailHook)
	case boil.BeforeUpdateHook:
		trainingSetDetailBeforeUpdateHooks = append(trainingSetDetailBeforeUpdateHooks, trainingSetDetailHook)
	case boil.AfterUpdateHook:
		trainingSetDetailAfterUpdateHooks = append(trainingSetDetailAfterUpdateHooks, trainingSetDetailHook)
	case boil.BeforeDeleteHook:
		trainingSetDetailBeforeDeleteHooks = append(trainingSetDetailBeforeDeleteHooks, trainingSetDetailHook)
	case boil.AfterDeleteHook:
		trainingSetDetailAfterDeleteHooks = append(trainingSetDetailAfterDeleteHooks, trainingSetDetailHook)
	case boil.BeforeUpsertHook:
		trainingSetDetailBeforeUpsertHooks = append(trainingSetDetailBeforeUpsertHooks, trainingSetDetailHook)
	case boil.AfterUpsertHook:
		trainingSetDetailAfterUpsertHooks = append(trainingSetDetailAfterUpsertHooks, trainingSetDetailHook)
	}
}

// One returns a single trainingSetDetail record from the query.
func (q trainingSetDetailQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TrainingSetDetail, error) {
	o := &TrainingSetDetail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for training_set_details")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TrainingSetDetail records from the query.
func (q trainingSetDetailQuery) All(ctx context.Context, exec boil.ContextExecutor) (TrainingSetDetailSlice, error) {
	var o []*TrainingSetDetail

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to TrainingSetDetail slice")
	}

	if len(trainingSetDetailAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TrainingSetDetail records in the query.
func (q trainingSetDetailQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count training_set_details rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q trainingSetDetailQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if training_set_details exists")
	}

	return count > 0, nil
}

// TrainingRecord pointed to by the foreign key.
func (o *TrainingSetDetail) TrainingRecord(mods ...qm.QueryMod) trainingRecordQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.TrainingRecordID),
	}

	queryMods = append(queryMods, mods...)

	return TrainingRecords(queryMods...)
}

// TrainingSet pointed to by the foreign key.
func (o *TrainingSetDetail) TrainingSet(mods ...qm.QueryMod) trainingSetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.TrainingSetID),
	}

	queryMods = append(queryMods, mods...)

	return TrainingSets(queryMods...)
}

// LoadTrainingRecord allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (trainingSetDetailL) LoadTrainingRecord(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrainingSetDetail interface{}, mods queries.Applicator) error {
	var slice []*TrainingSetDetail
	var object *TrainingSetDetail

	if singular {
		var ok bool
		object, ok = maybeTrainingSetDetail.(*TrainingSetDetail)
		if !ok {
			object = new(TrainingSetDetail)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrainingSetDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrainingSetDetail))
			}
		}
	} else {
		s, ok := maybeTrainingSetDetail.(*[]*TrainingSetDetail)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrainingSetDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrainingSetDetail))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trainingSetDetailR{}
		}
		args = append(args, object.TrainingRecordID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trainingSetDetailR{}
			}

			for _, a := range args {
				if a == obj.TrainingRecordID {
					continue Outer
				}
			}

			args = append(args, obj.TrainingRecordID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`training_records`),
		qm.WhereIn(`training_records.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TrainingRecord")
	}

	var resultSlice []*TrainingRecord
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TrainingRecord")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for training_records")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for training_records")
	}

	if len(trainingRecordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TrainingRecord = foreign
		if foreign.R == nil {
			foreign.R = &trainingRecordR{}
		}
		foreign.R.TrainingSetDetails = append(foreign.R.TrainingSetDetails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TrainingRecordID == foreign.ID {
				local.R.TrainingRecord = foreign
				if foreign.R == nil {
					foreign.R = &trainingRecordR{}
				}
				foreign.R.TrainingSetDetails = append(foreign.R.TrainingSetDetails, local)
				break
			}
		}
	}

	return nil
}

// LoadTrainingSet allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (trainingSetDetailL) LoadTrainingSet(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrainingSetDetail interface{}, mods queries.Applicator) error {
	var slice []*TrainingSetDetail
	var object *TrainingSetDetail

	if singular {
		var ok bool
		object, ok = maybeTrainingSetDetail.(*TrainingSetDetail)
		if !ok {
			object = new(TrainingSetDetail)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrainingSetDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrainingSetDetail))
			}
		}
	} else {
		s, ok := maybeTrainingSetDetail.(*[]*TrainingSetDetail)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrainingSetDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrainingSetDetail))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trainingSetDetailR{}
		}
		args = append(args, object.TrainingSetID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trainingSetDetailR{}
			}

			for _, a := range args {
				if a == obj.TrainingSetID {
					continue Outer
				}
			}

			args = append(args, obj.TrainingSetID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`training_sets`),
		qm.WhereIn(`training_sets.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TrainingSet")
	}

	var resultSlice []*TrainingSet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TrainingSet")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for training_sets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for training_sets")
	}

	if len(trainingSetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TrainingSet = foreign
		if foreign.R == nil {
			foreign.R = &trainingSetR{}
		}
		foreign.R.TrainingSetDetails = append(foreign.R.TrainingSetDetails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TrainingSetID == foreign.ID {
				local.R.TrainingSet = foreign
				if foreign.R == nil {
					foreign.R = &trainingSetR{}
				}
				foreign.R.TrainingSetDetails = append(foreign.R.TrainingSetDetails, local)
				break
			}
		}
	}

	return nil
}

// SetTrainingRecord of the trainingSetDetail to the related item.
// Sets o.R.TrainingRecord to related.
// Adds o to related.R.TrainingSetDetails.
func (o *TrainingSetDetail) SetTrainingRecord(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TrainingRecord) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `training_set_details` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"training_record_id"}),
		strmangle.WhereClause("`", "`", 0, trainingSetDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TrainingRecordID = related.ID
	if o.R == nil {
		o.R = &trainingSetDetailR{
			TrainingRecord: related,
		}
	} else {
		o.R.TrainingRecord = related
	}

	if related.R == nil {
		related.R = &trainingRecordR{
			TrainingSetDetails: TrainingSetDetailSlice{o},
		}
	} else {
		related.R.TrainingSetDetails = append(related.R.TrainingSetDetails, o)
	}

	return nil
}

// SetTrainingSet of the trainingSetDetail to the related item.
// Sets o.R.TrainingSet to related.
// Adds o to related.R.TrainingSetDetails.
func (o *TrainingSetDetail) SetTrainingSet(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TrainingSet) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `training_set_details` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"training_set_id"}),
		strmangle.WhereClause("`", "`", 0, trainingSetDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TrainingSetID = related.ID
	if o.R == nil {
		o.R = &trainingSetDetailR{
			TrainingSet: related,
		}
	} else {
		o.R.TrainingSet = related
	}

	if related.R == nil {
		related.R = &trainingSetR{
			TrainingSetDetails: TrainingSetDetailSlice{o},
		}
	} else {
		related.R.TrainingSetDetails = append(related.R.TrainingSetDetails, o)
	}

	return nil
}

// TrainingSetDetails retrieves all the records using an executor.
func TrainingSetDetails(mods ...qm.QueryMod) trainingSetDetailQuery {
	mods = append(mods, qm.From("`training_set_details`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`training_set_details`.*"})
	}

	return trainingSetDetailQuery{q}
}

// FindTrainingSetDetail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTrainingSetDetail(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TrainingSetDetail, error) {
	trainingSetDetailObj := &TrainingSetDetail{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `training_set_details` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, trainingSetDetailObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from training_set_details")
	}

	if err = trainingSetDetailObj.doAfterSelectHooks(ctx, exec); err != nil {
		return trainingSetDetailObj, err
	}

	return trainingSetDetailObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TrainingSetDetail) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no training_set_details provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trainingSetDetailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	trainingSetDetailInsertCacheMut.RLock()
	cache, cached := trainingSetDetailInsertCache[key]
	trainingSetDetailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			trainingSetDetailAllColumns,
			trainingSetDetailColumnsWithDefault,
			trainingSetDetailColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(trainingSetDetailType, trainingSetDetailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(trainingSetDetailType, trainingSetDetailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `training_set_details` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `training_set_details` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `training_set_details` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, trainingSetDetailPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into training_set_details")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == trainingSetDetailMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "db: unable to populate default values for training_set_details")
	}

CacheNoHooks:
	if !cached {
		trainingSetDetailInsertCacheMut.Lock()
		trainingSetDetailInsertCache[key] = cache
		trainingSetDetailInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TrainingSetDetail.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TrainingSetDetail) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	trainingSetDetailUpdateCacheMut.RLock()
	cache, cached := trainingSetDetailUpdateCache[key]
	trainingSetDetailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			trainingSetDetailAllColumns,
			trainingSetDetailPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update training_set_details, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `training_set_details` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, trainingSetDetailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(trainingSetDetailType, trainingSetDetailMapping, append(wl, trainingSetDetailPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update training_set_details row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for training_set_details")
	}

	if !cached {
		trainingSetDetailUpdateCacheMut.Lock()
		trainingSetDetailUpdateCache[key] = cache
		trainingSetDetailUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q trainingSetDetailQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for training_set_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for training_set_details")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TrainingSetDetailSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trainingSetDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `training_set_details` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, trainingSetDetailPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in trainingSetDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all trainingSetDetail")
	}
	return rowsAff, nil
}

var mySQLTrainingSetDetailUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TrainingSetDetail) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no training_set_details provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trainingSetDetailColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTrainingSetDetailUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	trainingSetDetailUpsertCacheMut.RLock()
	cache, cached := trainingSetDetailUpsertCache[key]
	trainingSetDetailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			trainingSetDetailAllColumns,
			trainingSetDetailColumnsWithDefault,
			trainingSetDetailColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			trainingSetDetailAllColumns,
			trainingSetDetailPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("db: unable to upsert training_set_details, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`training_set_details`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `training_set_details` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(trainingSetDetailType, trainingSetDetailMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(trainingSetDetailType, trainingSetDetailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "db: unable to upsert for training_set_details")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == trainingSetDetailMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(trainingSetDetailType, trainingSetDetailMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "db: unable to retrieve unique values for training_set_details")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "db: unable to populate default values for training_set_details")
	}

CacheNoHooks:
	if !cached {
		trainingSetDetailUpsertCacheMut.Lock()
		trainingSetDetailUpsertCache[key] = cache
		trainingSetDetailUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TrainingSetDetail record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TrainingSetDetail) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no TrainingSetDetail provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), trainingSetDetailPrimaryKeyMapping)
	sql := "DELETE FROM `training_set_details` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from training_set_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for training_set_details")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q trainingSetDetailQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no trainingSetDetailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from training_set_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for training_set_details")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TrainingSetDetailSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(trainingSetDetailBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trainingSetDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `training_set_details` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, trainingSetDetailPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from trainingSetDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for training_set_details")
	}

	if len(trainingSetDetailAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TrainingSetDetail) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTrainingSetDetail(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TrainingSetDetailSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TrainingSetDetailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trainingSetDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `training_set_details`.* FROM `training_set_details` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, trainingSetDetailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in TrainingSetDetailSlice")
	}

	*o = slice

	return nil
}

// TrainingSetDetailExists checks if the TrainingSetDetail row exists.
func TrainingSetDetailExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `training_set_details` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if training_set_details exists")
	}

	return exists, nil
}

// Exists checks if the TrainingSetDetail row exists.
func (o *TrainingSetDetail) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TrainingSetDetailExists(ctx, exec, o.ID)
}
