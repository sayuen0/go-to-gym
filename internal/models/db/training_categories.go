// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TrainingCategory is an object representing the database table.
type TrainingCategory struct { // カテゴリーID
	ID int `boil:"id" json:"id" toml:"id" yaml:"id"`
	// カテゴリー名
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`
	// カテゴリーの説明
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	// レコード作成日時
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// レコード更新日時
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	// レコード削除日時
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *trainingCategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L trainingCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TrainingCategoryColumns = struct {
	ID          string
	Name        string
	Description string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "id",
	Name:        "name",
	Description: "description",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
}

var TrainingCategoryTableColumns = struct {
	ID          string
	Name        string
	Description string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "training_categories.id",
	Name:        "training_categories.name",
	Description: "training_categories.description",
	CreatedAt:   "training_categories.created_at",
	UpdatedAt:   "training_categories.updated_at",
	DeletedAt:   "training_categories.deleted_at",
}

// Generated where

var TrainingCategoryWhere = struct {
	ID          whereHelperint
	Name        whereHelperstring
	Description whereHelpernull_String
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	DeletedAt   whereHelpernull_Time
}{
	ID:          whereHelperint{field: "`training_categories`.`id`"},
	Name:        whereHelperstring{field: "`training_categories`.`name`"},
	Description: whereHelpernull_String{field: "`training_categories`.`description`"},
	CreatedAt:   whereHelpertime_Time{field: "`training_categories`.`created_at`"},
	UpdatedAt:   whereHelpertime_Time{field: "`training_categories`.`updated_at`"},
	DeletedAt:   whereHelpernull_Time{field: "`training_categories`.`deleted_at`"},
}

// TrainingCategoryRels is where relationship names are stored.
var TrainingCategoryRels = struct {
	CategoryExercises string
}{
	CategoryExercises: "CategoryExercises",
}

// trainingCategoryR is where relationships are stored.
type trainingCategoryR struct {
	CategoryExercises ExerciseSlice `boil:"CategoryExercises" json:"CategoryExercises" toml:"CategoryExercises" yaml:"CategoryExercises"`
}

// NewStruct creates a new relationship struct
func (*trainingCategoryR) NewStruct() *trainingCategoryR {
	return &trainingCategoryR{}
}

func (r *trainingCategoryR) GetCategoryExercises() ExerciseSlice {
	if r == nil {
		return nil
	}
	return r.CategoryExercises
}

// trainingCategoryL is where Load methods for each relationship are stored.
type trainingCategoryL struct{}

var (
	trainingCategoryAllColumns            = []string{"id", "name", "description", "created_at", "updated_at", "deleted_at"}
	trainingCategoryColumnsWithoutDefault = []string{"name", "description", "deleted_at"}
	trainingCategoryColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	trainingCategoryPrimaryKeyColumns     = []string{"id"}
	trainingCategoryGeneratedColumns      = []string{}
)

type (
	// TrainingCategorySlice is an alias for a slice of pointers to TrainingCategory.
	// This should almost always be used instead of []TrainingCategory.
	TrainingCategorySlice []*TrainingCategory
	// TrainingCategoryHook is the signature for custom TrainingCategory hook methods
	TrainingCategoryHook func(context.Context, boil.ContextExecutor, *TrainingCategory) error

	trainingCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	trainingCategoryType                 = reflect.TypeOf(&TrainingCategory{})
	trainingCategoryMapping              = queries.MakeStructMapping(trainingCategoryType)
	trainingCategoryPrimaryKeyMapping, _ = queries.BindMapping(trainingCategoryType, trainingCategoryMapping, trainingCategoryPrimaryKeyColumns)
	trainingCategoryInsertCacheMut       sync.RWMutex
	trainingCategoryInsertCache          = make(map[string]insertCache)
	trainingCategoryUpdateCacheMut       sync.RWMutex
	trainingCategoryUpdateCache          = make(map[string]updateCache)
	trainingCategoryUpsertCacheMut       sync.RWMutex
	trainingCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var trainingCategoryAfterSelectHooks []TrainingCategoryHook

var trainingCategoryBeforeInsertHooks []TrainingCategoryHook
var trainingCategoryAfterInsertHooks []TrainingCategoryHook

var trainingCategoryBeforeUpdateHooks []TrainingCategoryHook
var trainingCategoryAfterUpdateHooks []TrainingCategoryHook

var trainingCategoryBeforeDeleteHooks []TrainingCategoryHook
var trainingCategoryAfterDeleteHooks []TrainingCategoryHook

var trainingCategoryBeforeUpsertHooks []TrainingCategoryHook
var trainingCategoryAfterUpsertHooks []TrainingCategoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TrainingCategory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingCategoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TrainingCategory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingCategoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TrainingCategory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingCategoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TrainingCategory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingCategoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TrainingCategory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingCategoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TrainingCategory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingCategoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TrainingCategory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingCategoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TrainingCategory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingCategoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TrainingCategory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trainingCategoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTrainingCategoryHook registers your hook function for all future operations.
func AddTrainingCategoryHook(hookPoint boil.HookPoint, trainingCategoryHook TrainingCategoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		trainingCategoryAfterSelectHooks = append(trainingCategoryAfterSelectHooks, trainingCategoryHook)
	case boil.BeforeInsertHook:
		trainingCategoryBeforeInsertHooks = append(trainingCategoryBeforeInsertHooks, trainingCategoryHook)
	case boil.AfterInsertHook:
		trainingCategoryAfterInsertHooks = append(trainingCategoryAfterInsertHooks, trainingCategoryHook)
	case boil.BeforeUpdateHook:
		trainingCategoryBeforeUpdateHooks = append(trainingCategoryBeforeUpdateHooks, trainingCategoryHook)
	case boil.AfterUpdateHook:
		trainingCategoryAfterUpdateHooks = append(trainingCategoryAfterUpdateHooks, trainingCategoryHook)
	case boil.BeforeDeleteHook:
		trainingCategoryBeforeDeleteHooks = append(trainingCategoryBeforeDeleteHooks, trainingCategoryHook)
	case boil.AfterDeleteHook:
		trainingCategoryAfterDeleteHooks = append(trainingCategoryAfterDeleteHooks, trainingCategoryHook)
	case boil.BeforeUpsertHook:
		trainingCategoryBeforeUpsertHooks = append(trainingCategoryBeforeUpsertHooks, trainingCategoryHook)
	case boil.AfterUpsertHook:
		trainingCategoryAfterUpsertHooks = append(trainingCategoryAfterUpsertHooks, trainingCategoryHook)
	}
}

// One returns a single trainingCategory record from the query.
func (q trainingCategoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TrainingCategory, error) {
	o := &TrainingCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for training_categories")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TrainingCategory records from the query.
func (q trainingCategoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (TrainingCategorySlice, error) {
	var o []*TrainingCategory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to TrainingCategory slice")
	}

	if len(trainingCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TrainingCategory records in the query.
func (q trainingCategoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count training_categories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q trainingCategoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if training_categories exists")
	}

	return count > 0, nil
}

// CategoryExercises retrieves all the exercise's Exercises with an executor via category_id column.
func (o *TrainingCategory) CategoryExercises(mods ...qm.QueryMod) exerciseQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`exercises`.`category_id`=?", o.ID),
	)

	return Exercises(queryMods...)
}

// LoadCategoryExercises allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trainingCategoryL) LoadCategoryExercises(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrainingCategory interface{}, mods queries.Applicator) error {
	var slice []*TrainingCategory
	var object *TrainingCategory

	if singular {
		var ok bool
		object, ok = maybeTrainingCategory.(*TrainingCategory)
		if !ok {
			object = new(TrainingCategory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrainingCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrainingCategory))
			}
		}
	} else {
		s, ok := maybeTrainingCategory.(*[]*TrainingCategory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrainingCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrainingCategory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trainingCategoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trainingCategoryR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`exercises`),
		qm.WhereIn(`exercises.category_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load exercises")
	}

	var resultSlice []*Exercise
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice exercises")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on exercises")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for exercises")
	}

	if len(exerciseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CategoryExercises = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &exerciseR{}
			}
			foreign.R.Category = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CategoryID {
				local.R.CategoryExercises = append(local.R.CategoryExercises, foreign)
				if foreign.R == nil {
					foreign.R = &exerciseR{}
				}
				foreign.R.Category = local
				break
			}
		}
	}

	return nil
}

// AddCategoryExercises adds the given related objects to the existing relationships
// of the training_category, optionally inserting them as new records.
// Appends related to o.R.CategoryExercises.
// Sets related.R.Category appropriately.
func (o *TrainingCategory) AddCategoryExercises(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Exercise) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CategoryID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `exercises` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"category_id"}),
				strmangle.WhereClause("`", "`", 0, exercisePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CategoryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &trainingCategoryR{
			CategoryExercises: related,
		}
	} else {
		o.R.CategoryExercises = append(o.R.CategoryExercises, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &exerciseR{
				Category: o,
			}
		} else {
			rel.R.Category = o
		}
	}
	return nil
}

// TrainingCategories retrieves all the records using an executor.
func TrainingCategories(mods ...qm.QueryMod) trainingCategoryQuery {
	mods = append(mods, qm.From("`training_categories`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`training_categories`.*"})
	}

	return trainingCategoryQuery{q}
}

// FindTrainingCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTrainingCategory(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TrainingCategory, error) {
	trainingCategoryObj := &TrainingCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `training_categories` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, trainingCategoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from training_categories")
	}

	if err = trainingCategoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return trainingCategoryObj, err
	}

	return trainingCategoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TrainingCategory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no training_categories provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trainingCategoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	trainingCategoryInsertCacheMut.RLock()
	cache, cached := trainingCategoryInsertCache[key]
	trainingCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			trainingCategoryAllColumns,
			trainingCategoryColumnsWithDefault,
			trainingCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(trainingCategoryType, trainingCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(trainingCategoryType, trainingCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `training_categories` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `training_categories` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `training_categories` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, trainingCategoryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into training_categories")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == trainingCategoryMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "db: unable to populate default values for training_categories")
	}

CacheNoHooks:
	if !cached {
		trainingCategoryInsertCacheMut.Lock()
		trainingCategoryInsertCache[key] = cache
		trainingCategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TrainingCategory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TrainingCategory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	trainingCategoryUpdateCacheMut.RLock()
	cache, cached := trainingCategoryUpdateCache[key]
	trainingCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			trainingCategoryAllColumns,
			trainingCategoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update training_categories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `training_categories` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, trainingCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(trainingCategoryType, trainingCategoryMapping, append(wl, trainingCategoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update training_categories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for training_categories")
	}

	if !cached {
		trainingCategoryUpdateCacheMut.Lock()
		trainingCategoryUpdateCache[key] = cache
		trainingCategoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q trainingCategoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for training_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for training_categories")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TrainingCategorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trainingCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `training_categories` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, trainingCategoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in trainingCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all trainingCategory")
	}
	return rowsAff, nil
}

var mySQLTrainingCategoryUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TrainingCategory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no training_categories provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trainingCategoryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTrainingCategoryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	trainingCategoryUpsertCacheMut.RLock()
	cache, cached := trainingCategoryUpsertCache[key]
	trainingCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			trainingCategoryAllColumns,
			trainingCategoryColumnsWithDefault,
			trainingCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			trainingCategoryAllColumns,
			trainingCategoryPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("db: unable to upsert training_categories, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`training_categories`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `training_categories` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(trainingCategoryType, trainingCategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(trainingCategoryType, trainingCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "db: unable to upsert for training_categories")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == trainingCategoryMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(trainingCategoryType, trainingCategoryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "db: unable to retrieve unique values for training_categories")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "db: unable to populate default values for training_categories")
	}

CacheNoHooks:
	if !cached {
		trainingCategoryUpsertCacheMut.Lock()
		trainingCategoryUpsertCache[key] = cache
		trainingCategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TrainingCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TrainingCategory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no TrainingCategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), trainingCategoryPrimaryKeyMapping)
	sql := "DELETE FROM `training_categories` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from training_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for training_categories")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q trainingCategoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no trainingCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from training_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for training_categories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TrainingCategorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(trainingCategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trainingCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `training_categories` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, trainingCategoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from trainingCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for training_categories")
	}

	if len(trainingCategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TrainingCategory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTrainingCategory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TrainingCategorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TrainingCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trainingCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `training_categories`.* FROM `training_categories` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, trainingCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in TrainingCategorySlice")
	}

	*o = slice

	return nil
}

// TrainingCategoryExists checks if the TrainingCategory row exists.
func TrainingCategoryExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `training_categories` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if training_categories exists")
	}

	return exists, nil
}

// Exists checks if the TrainingCategory row exists.
func (o *TrainingCategory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TrainingCategoryExists(ctx, exec, o.ID)
}
