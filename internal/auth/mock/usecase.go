// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/sayuen0/go-to-gym/internal/auth"
	"github.com/sayuen0/go-to-gym/internal/models"
	"github.com/sayuen0/go-to-gym/pkg/utils"
	"sync"
)

// Ensure, that UseCaseMock does implement auth.UseCase.
// If this is not the case, regenerate this file with moq.
var _ auth.UseCase = &UseCaseMock{}

// UseCaseMock is a mock implementation of auth.UseCase.
//
//	func TestSomethingThatUsesUseCase(t *testing.T) {
//
//		// make and configure a mocked auth.UseCase
//		mockedUseCase := &UseCaseMock{
//			GetByIDFunc: func(ctx context.Context, uuid string) (*models.User, error) {
//				panic("mock out the GetByUUID method")
//			},
//			GetUsersFunc: func(ctx context.Context, req *utils.PaginationRequest) (*models.UsersList, error) {
//				panic("mock out the GetUsers method")
//			},
//			LoginFunc: func(ctx context.Context, user *models.UserLoginRequest) (*models.UserWithToken, error) {
//				panic("mock out the Login method")
//			},
//			RegisterFunc: func(ctx context.Context, user *models.UserCreateRequest) (*models.UserWithToken, error) {
//				panic("mock out the Register method")
//			},
//		}
//
//		// use mockedUseCase in code that requires auth.UseCase
//		// and then make assertions.
//
//	}
type UseCaseMock struct {
	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, uuid string) (*models.User, error)

	// GetUsersFunc mocks the GetUsers method.
	GetUsersFunc func(ctx context.Context, req *utils.PaginationRequest) (*models.UsersList, error)

	// LoginFunc mocks the Login method.
	LoginFunc func(ctx context.Context, user *models.UserLoginRequest) (*models.UserWithToken, error)

	// RegisterFunc mocks the Register method.
	RegisterFunc func(ctx context.Context, user *models.UserCreateRequest) (*models.UserWithToken, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UUID is the uuid argument value.
			UUID string
		}
		// GetUsers holds details about calls to the GetUsers method.
		GetUsers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *utils.PaginationRequest
		}
		// Login holds details about calls to the Login method.
		Login []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User *models.UserLoginRequest
		}
		// Register holds details about calls to the Register method.
		Register []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User *models.UserCreateRequest
		}
	}
	lockGetByID  sync.RWMutex
	lockGetUsers sync.RWMutex
	lockLogin    sync.RWMutex
	lockRegister sync.RWMutex
}

// GetByID calls GetByIDFunc.
func (mock *UseCaseMock) GetByID(ctx context.Context, uuid string) (*models.User, error) {
	if mock.GetByIDFunc == nil {
		panic("UseCaseMock.GetByIDFunc: method is nil but UseCase.GetByUUID was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		UUID string
	}{
		Ctx:  ctx,
		UUID: uuid,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, uuid)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedUseCase.GetByIDCalls())
func (mock *UseCaseMock) GetByIDCalls() []struct {
	Ctx  context.Context
	UUID string
} {
	var calls []struct {
		Ctx  context.Context
		UUID string
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// GetUsers calls GetUsersFunc.
func (mock *UseCaseMock) GetUsers(ctx context.Context, req *utils.PaginationRequest) (*models.UsersList, error) {
	if mock.GetUsersFunc == nil {
		panic("UseCaseMock.GetUsersFunc: method is nil but UseCase.GetUsers was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *utils.PaginationRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockGetUsers.Lock()
	mock.calls.GetUsers = append(mock.calls.GetUsers, callInfo)
	mock.lockGetUsers.Unlock()
	return mock.GetUsersFunc(ctx, req)
}

// GetUsersCalls gets all the calls that were made to GetUsers.
// Check the length with:
//
//	len(mockedUseCase.GetUsersCalls())
func (mock *UseCaseMock) GetUsersCalls() []struct {
	Ctx context.Context
	Req *utils.PaginationRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *utils.PaginationRequest
	}
	mock.lockGetUsers.RLock()
	calls = mock.calls.GetUsers
	mock.lockGetUsers.RUnlock()
	return calls
}

// Login calls LoginFunc.
func (mock *UseCaseMock) Login(ctx context.Context, user *models.UserLoginRequest) (*models.UserWithToken, error) {
	if mock.LoginFunc == nil {
		panic("UseCaseMock.LoginFunc: method is nil but UseCase.Login was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		User *models.UserLoginRequest
	}{
		Ctx:  ctx,
		User: user,
	}
	mock.lockLogin.Lock()
	mock.calls.Login = append(mock.calls.Login, callInfo)
	mock.lockLogin.Unlock()
	return mock.LoginFunc(ctx, user)
}

// LoginCalls gets all the calls that were made to Login.
// Check the length with:
//
//	len(mockedUseCase.LoginCalls())
func (mock *UseCaseMock) LoginCalls() []struct {
	Ctx  context.Context
	User *models.UserLoginRequest
} {
	var calls []struct {
		Ctx  context.Context
		User *models.UserLoginRequest
	}
	mock.lockLogin.RLock()
	calls = mock.calls.Login
	mock.lockLogin.RUnlock()
	return calls
}

// Register calls RegisterFunc.
func (mock *UseCaseMock) Register(ctx context.Context, user *models.UserCreateRequest) (*models.UserWithToken, error) {
	if mock.RegisterFunc == nil {
		panic("UseCaseMock.RegisterFunc: method is nil but UseCase.Register was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		User *models.UserCreateRequest
	}{
		Ctx:  ctx,
		User: user,
	}
	mock.lockRegister.Lock()
	mock.calls.Register = append(mock.calls.Register, callInfo)
	mock.lockRegister.Unlock()
	return mock.RegisterFunc(ctx, user)
}

// RegisterCalls gets all the calls that were made to Register.
// Check the length with:
//
//	len(mockedUseCase.RegisterCalls())
func (mock *UseCaseMock) RegisterCalls() []struct {
	Ctx  context.Context
	User *models.UserCreateRequest
} {
	var calls []struct {
		Ctx  context.Context
		User *models.UserCreateRequest
	}
	mock.lockRegister.RLock()
	calls = mock.calls.Register
	mock.lockRegister.RUnlock()
	return calls
}
